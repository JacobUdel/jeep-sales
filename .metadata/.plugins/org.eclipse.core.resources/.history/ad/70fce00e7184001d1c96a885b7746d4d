package com.promineotech.jeep.controller;


import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.Map;
import java.util.stream.Stream;


import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import static org.junit.jupiter.params.provider.Arguments.arguments;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;

import com.promineotech.jeep.JeepSales;
import com.promineotech.jeep.controller.support.FetchJeepTestSupport;
import com.promineotech.jeep.entity.Jeep;
import com.promineotech.jeep.entity.JeepModel;

import lombok.Getter;


@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = {JeepSales.class})
@ActiveProfiles("test")

@Sql(scripts = { "classpath:flyway/migrations/V1.0__Jeep_Schema.sql",
		"classpath:flyway/migrations/V1.1__Jeep_Data.sql" }, 
		config = @SqlConfig(encoding = "utf-8"))
class FetchJeepTest extends FetchJeepTestSupport {

//	@Autowired
//	@Getter
//	private TestRestTemplate restTemplate;

//	@LocalServerPort
//	private int serverPort;

	@Test
	void testThatJeepsAreReturnedWhenAValidModelAndTrimAreSupplied() {
		//Given: A valid model, trim, and URI
		JeepModel model = JeepModel.WRANGLER;
		String trim = "Sport";
		String uri = String.format("%s?model=%s&trim=%s", getBaseURI(), model, trim);
		//System.out.println(uri);
		
		//When: a connection is made to the URI
		//ResponseEntity<Jeep> response = getRestTemplate().getForEntity(uri, Jeep.class);
		ResponseEntity<List<Jeep>> response = restTemplate.exchange(uri, HttpMethod.GET, null, new ParameterizedTypeReference<>() {});
		
		//Then: a success (OK - 200) status code is returned
		assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
		//AND the actual list is the same as the expected list
		List<Jeep> actual = response.getBody();
		List<Jeep> expected = buildExpected();
	//	actual.forEach(jeep -> jeep.setModelPK(null));
		assertThat(actual).isEqualTo(expected);
	}

	@Test
	void testThatAnErrorMessageIsReturnedWhenAnUnknownModelAndTrimAreSupplied() {
		//Given: A valid model, trim, and URI
		JeepModel model = JeepModel.WRANGLER;
		String trim = "Unknown value";
		String uri = String.format("%s?model=%s&trim=%s", getBaseURI(), model, trim);
		//System.out.println(uri);
		
		//When: a connection is made to the URI
		//ResponseEntity<Jeep> response = getRestTemplate().getForEntity(uri, Jeep.class);
		ResponseEntity<Map<String, Object>> response = restTemplate.exchange(uri, HttpMethod.GET, null, new ParameterizedTypeReference<>() {});
		
		//Then: a NOT FOUND (404) code is returned
		assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
		//AND an error message is returned
		Map<String, Object> error = response.getBody();
		assertErrorMessageValid(error, HttpStatus.NOT_FOUND);
	}
	@ParameterizedTest
	@MethodSource("com.promineotech.jeep.controller.FetchJeepTest#parametersForInvalidInput")
	void testThatAnErrorMessageIsReturnedWhenAnInvalidValueIsSupplied(String model, String trim, String reason) {
		//Given: A valid model, trim, and URI

		String uri = String.format("%s?model=%s&trim=%s", getBaseURI(), model, trim);
		//System.out.println(uri);
		
		//When: a connection is made to the URI
		//ResponseEntity<Jeep> response = getRestTemplate().getForEntity(uri, Jeep.class);
		ResponseEntity<Map<String, Object>> response = restTemplate.exchange(uri, HttpMethod.GET, null, new ParameterizedTypeReference<>() {});
		
		//Then: a BAD_REQUEST (400) code is returned
		assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
		//AND an error message is returned
		Map<String, Object> error = response.getBody();
		assertErrorMessageValid(error, HttpStatus.BAD_REQUEST);
	}
	
	static Stream<Arguments> parametersForInvalidInput() {
		return Stream.of(
				arguments("GRAND_CHEROKEE", ''#&^#@%$@&'', "Trim contains non-alpha-numeric charactors")
				);
	}


}
